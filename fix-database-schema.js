import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

dotenv.config()

const supabaseUrl = process.env.VITE_SUPABASE_URL
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY

console.log('üîß PROBLEMA IDENTIFICADO: Coluna sale_id n√£o existe na tabela appointments')
console.log('üìã SOLU√á√ÉO OBRIGAT√ìRIA: Execute manualmente no painel do Supabase')
console.log('')
console.log('üåê 1. Acesse: https://supabase.com/dashboard')
console.log('üìÅ 2. V√° para seu projeto: rsbssxvnxpewijvpzlsg')
console.log('üíª 3. Clique em "SQL Editor" no menu lateral')
console.log('üìù 4. Cole e execute este comando:')
console.log('')
console.log('ALTER TABLE public.appointments ADD COLUMN sale_id BIGINT REFERENCES public.sales(id) ON DELETE SET NULL;')
console.log('')
console.log('‚úÖ 5. Clique em "Run" para executar')
console.log('')
console.log('‚ö†Ô∏è  IMPORTANTE: Este √© o √öNICO jeito de resolver o problema!')
console.log('‚ö†Ô∏è  A API REST do Supabase n√£o permite altera√ß√µes de schema por seguran√ßa.')
console.log('')
console.log('üéØ Ap√≥s executar o comando, o agendamento funcionar√° perfeitamente!')

// Vamos tamb√©m verificar se conseguimos pelo menos conectar
const supabase = createClient(supabaseUrl, supabaseKey)

async function testConnection() {
  try {
    console.log('üîç Testando conex√£o com o banco...')
    const { data, error } = await supabase.from('appointments').select('*').limit(1)
    
    if (error) {
      console.log('‚ùå Erro de conex√£o:', error.message)
    } else {
      console.log('‚úÖ Conex√£o OK - Banco acess√≠vel')
      console.log('üìä Colunas atuais na tabela appointments:')
      if (data && data.length > 0) {
        console.log(Object.keys(data[0]).join(', '))
      } else {
        console.log('(Tabela vazia - n√£o √© poss√≠vel ver colunas)')
      }
    }
  } catch (err) {
    console.log('‚ùå Erro:', err.message)
  }
}

testConnection()